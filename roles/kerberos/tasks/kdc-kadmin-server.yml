#tasks for setting up kdc-server
- name: build kerberos from source
  ansible.builtin.include_tasks:
    file: kerberos-build-from-source.yml
    apply:
      tags:
        - server
  when: build_from_src

- name: install kerberos from packages
  ansible.builtin.yum:
    name: krb5*
  when: not build_from_src

- name: enable kdc & kadmin service
  ansible.builtin.service:
    name: '{{ item }}'
    enabled: true
  when: kdc_sysctl_srv.changed or kadmin_sysctl_srv.changed
  with_items:
    - krb5kdc
    - kadmin

- name: set kerberos binaries & configs path
  ansible.builtin.set_fact:
    binaries_path: '{{ "/usr/local" if build_from_src else "/usr" }}'
    conf_path: '{{ "/usr/local/var" if build_from_src else "/var/kerberos" }}'

- name: set kdc vars
  ansible.builtin.set_fact:
    master_key: '{{ realms.master_key|default("K/M") }}'
    db_location: '{{ (realms.db_location|default(conf_path+"/krb5kdc"))+"/"+realms.domain+".db" }}'

- name: check if backup copy exists for kdc.conf
  ansible.builtin.stat:
    path: '{{ conf_path }}/krb5kdc/kdc.original.conf'
  register: kdc_conf_backup

- name: create backup copy of kdc.conf
  ansible.builtin.copy:
    remote_src: yes
    src: '{{ conf_path }}/krb5kdc/kdc.conf'
    dest: '{{ conf_path }}/krb5kdc/kdc.original.conf'
  when: not kdc_conf_backup.stat.exists

- name: update kdc.conf
  ansible.builtin.copy:
    dest: '{{ conf_path }}/krb5kdc/kdc.conf'
    content: |
      [kdcdefaults]
          kdc_ports = {{ kdc.ports }}
          kdc_tcp_ports = {{ kdc.ports }}
          spake_preauth_kdc_challenge = {{ kdc.preauth_challenge }}

      [realms]
      {{ realms.domain | upper }} = {
           #master_key_type = aes256-cts
           acl_file = {{ conf_path }}/krb5kdc/kadm5.acl
           dict_file = /usr/share/dict/words
           admin_keytab = {{ conf_path }}/krb5kdc/kadm5.keytab
           supported_enctypes = aes256-cts:normal aes128-cts:normal arcfour-hmac:normal camellia256-cts:normal camellia128-cts:normal
      }

- name: check if backup copy exists for krb5.conf
  ansible.builtin.stat:
    path: /etc/krb5.original.conf
  register: krb5_conf_backup

- name: create backup copy of kdc.conf
  ansible.builtin.copy:
    remote_src: yes
    src: /etc/krb5.conf
    dest: /etc/krb5.original.conf
  when: not krb5_conf_backup.stat.exists

- name: update krb5.conf file
  ansible.builtin.template:
    src: krb5.conf.j2
    dest: /etc/krb5.conf

- name: check if servicekey file exists for ldap bind users
  ansible.builtin.stat:
    path: '{{ conf_path }}/krb5kdc/ldap.service.keyfile'
  register: ldap_srvkeyfile

- name: set rootdn args
  ansible.builtin.set_fact:
    rootdn_args: "-D cn={{ realms.ldap.root.user }},dc={{ realms.domain.split('.')[0] }},dc={{ realms.domain.split('.')[1] }} -w {{ realms.ldap.root.password }}"

- name: create ldap bind users servicekey file if its doesn't exists
  ansible.builtin.shell:
    cmd: |
      /usr/bin/echo -e "{{ vars['realms']['ldap']['bind_users'][item]['pass'] }}\n{{ vars['realms']['ldap']['bind_users'][item]['pass'] }}" | \
      {{ binaries_path }}/sbin/kdb5_ldap_util {{ rootdn_args }} -H {{ realms.ldap.host }} \
      stashsrvpw -f "{{ conf_path }}/krb5kdc/ldap.service.keyfile" \
      uid={{ vars['realms']['ldap']['bind_users'][item]['name'] }},dc={{ realms.domain.split('.')[0] }},dc={{ realms.domain.split('.')[1] }}
  with_items:
    - kdc
    - kadmin
  when: not ldap_srvkeyfile.stat.exists
  no_log: true

- name: update kadm5.acl file to define admin instance
  ansible.builtin.lineinfile:
    path: '{{ conf_path }}/krb5kdc/kadm5.acl'
    regexp: '.*EXAMPLE.COM.*'
    line: '*/admin@{{ realms.domain|upper }}    *'

- name: set kerberos utils attributes
  ansible.builtin.set_fact:
    kdb5_bin: "{{ binaries_path }}/sbin/{{ 'kdb5_util' if realms.db == 'file' else 'kdb5_ldap_util' }}"
    krb5util_args: "-M {{ master_key }} -r {{ realms.domain | upper }} {{ '-d '+db_location if realms.db == 'file' else rootdn_args+' -H '+realms.ldap.host }}"
    kadmin_args: "{{ '-d '+db_location if realms.db == 'file' else '' }}"

- name: check if principal db exists for realm {{ realms.domain }}
  ansible.builtin.shell:
    cmd: >
      {{ kdb5_bin }} {{ krb5util_args }} {{ 'list_mkeys' if realms.db == 'file' else 'list' }} 2>&1 > /dev/null && echo 'True' || echo 'False'
  register: principal_db

- name: set stat for principal_db_exists for realm {{ realms.domain }}
  ansible.builtin.set_fact:
    principal_db_exists: '{{ principal_db.stdout | bool }}'

- name: create principal db for realm {{ realms.domain }}
  ansible.builtin.shell:
    cmd: >
      {{ kdb5_bin }} {{ krb5util_args }} -P {{ realms.master_pass }} create -s
  when: not principal_db_exists

- name: restart kerberos services
  ansible.builtin.service:
    name: '{{ item }}'
    state: restarted
  with_items:
    - 'krb5kdc'
    - 'kadmin'

- name: create policies
  ansible.builtin.shell:
    cmd: >
      {{ binaries_path }}/sbin/kadmin.local {{ kadmin_args }} -q 'addpol {{ item }}'
  with_items: '{{ realms.policies }}'

- name: create root principal for managing kerberos
  ansible.builtin.shell:
    cmd: >
      {{ binaries_path }}/sbin/kadmin.local {{ kadmin_args }} -q 'addprinc -pw {{ realms.root_principal_pass }} -policy admin {{ realms.root_principal }}/admin'

- name: create keytab file for kadmin
  ansible.builtin.shell:
    cmd: >
      {{ binaries_path }}/sbin/kadmin.local {{ kadmin_args }} -q 'ktadd -k /var/kerberos/krb5kdc/kadm5.keytab kadmin/admin kadmin/changepw'

- name: create principal for kdc host
  ansible.builtin.shell:
    cmd: >
      {{ binaries_path }}/sbin/kadmin.local {{ kadmin_args }} -q 'addprinc -randkey -policy hosts {{ realms.subdomain }}.{{ realms.domain }}/host'

- name: create keytab file for kdc host
  ansible.builtin.shell:
    cmd: >
      {{ binaries_path }}/sbin/kadmin.local {{ kadmin_args }} -q 'ktadd -k /etc/krb5.keytab {{ realms.subdomain }}.{{ realms.domain }}/host'

- name: allow kerberos service through firewall
  ansible.posix.firewalld:
    service: '{{ item }}'
    permanent: yes
    immediate: yes
    state: enabled
  with_items:
    - 'kadmin'
    - 'kerberos'
    - 'kpasswd'

- name: set alias for kadmin.local & kdb5_util
  ansible.builtin.lineinfile:
    path: '{{ ansible_env.HOME }}/.bashrc'
    regexp: '{{ item.reg }}'
    line: '{{ item.line }}'
  with_items:
    - reg: '^alias kadmin.local=.*'
      line: 'alias kadmin.local="{{ binaries_path }}/sbin/kadmin.local {{ kadmin_args }} "'
    - reg: '^alias kdb5_util=.*'
      line: 'alias kdb5_util="{{ binaries_path }}/sbin/kdb5_util {{ krb5util_args }} "'